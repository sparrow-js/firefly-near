"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageLocalVersion = exports.readPackageJSON = exports.packageJSONFilename = exports.log = exports.getAndExtractTarball = exports.getNpmTarball = exports.checkAliInternal = exports.getNpmInfo = exports.isAliNpm = exports.getNpmClient = exports.getUnpkgHost = exports.getNpmRegistry = exports.getNpmLatestSemverVersion = exports.getLatestVersion = void 0;
var fsExtra = require("fs-extra");
var log_1 = require("./log");
exports.log = log_1.default;
var request = require("request-promise");
var semver = require("semver");
var fs = require("fs");
var mkdirp = require("mkdirp");
var path = require("path");
var urlJoin = require("url-join");
var progress = require("request-progress");
var zlib = require("zlib");
var tar = require("tar");
/**
 * 获取指定 npm 包版本的 tarball
 */
function getNpmTarball(npm, version, registry) {
    return getNpmInfo(npm, registry).then(function (json) {
        if (!semver.valid(version)) {
            version = json['dist-tags'].latest;
        }
        if (semver.valid(version) &&
            json.versions &&
            json.versions[version] &&
            json.versions[version].dist) {
            return json.versions[version].dist.tarball;
        }
        return Promise.reject(new Error(name + "@" + version + " \u5C1A\u672A\u53D1\u5E03"));
    });
}
exports.getNpmTarball = getNpmTarball;
/**
 * 获取 tar 并将其解压到指定的文件夹
 */
function getAndExtractTarball(destDir, tarball, progressFunc, formatFilename) {
    if (progressFunc === void 0) { progressFunc = function (state) { }; }
    if (formatFilename === void 0) { formatFilename = function (filename) {
        // 为了兼容
        if (filename === '_package.json') {
            return filename.replace(/^_/, '');
        }
        else {
            return filename.replace(/^_/, '.');
        }
    }; }
    return new Promise(function (resolve, reject) {
        var allFiles = [];
        var allWriteStream = [];
        var dirCollector = [];
        progress(request({
            url: tarball,
            timeout: 10000,
        }))
            .on('progress', progressFunc)
            .on('error', reject)
            // @ts-ignore
            .pipe(zlib.Unzip())
            // @ts-ignore
            .pipe(new tar.Parse())
            .on('entry', function (entry) {
            if (entry.type === 'Directory') {
                entry.resume();
                return;
            }
            var realPath = entry.path.replace(/^package\//, '');
            var filename = path.basename(realPath);
            filename = formatFilename(filename);
            var destPath = path.join(destDir, path.dirname(realPath), filename);
            var dirToBeCreate = path.dirname(destPath);
            if (!dirCollector.includes(dirToBeCreate)) {
                dirCollector.push(dirToBeCreate);
                mkdirp.sync(dirToBeCreate);
            }
            allFiles.push(destPath);
            allWriteStream.push(new Promise(function (streamResolve) {
                entry
                    .pipe(fs.createWriteStream(destPath))
                    .on('finish', function () { return streamResolve(); })
                    .on('close', function () { return streamResolve(); }); // resolve when file is empty in node v8
            }));
        })
            .on('end', function () {
            if (progressFunc) {
                progressFunc({
                    percent: 1,
                });
            }
            Promise.all(allWriteStream)
                .then(function () { return resolve(allFiles); })
                .catch(reject);
        });
    });
}
exports.getAndExtractTarball = getAndExtractTarball;
/**
 * 从 registry 获取 npm 的信息
 */
function getNpmInfo(npm, registry) {
    var register = registry || getNpmRegistry(npm);
    var url = urlJoin(register, npm);
    return request.get(url).then(function (response) {
        var body;
        try {
            body = JSON.parse(response);
        }
        catch (error) {
            return Promise.reject(error);
        }
        return body;
    });
}
exports.getNpmInfo = getNpmInfo;
/**
 * 获取某个 npm 的所有版本号
 */
function getVersions(npm, registry) {
    return getNpmInfo(npm, registry).then(function (body) {
        var versions = Object.keys(body.versions);
        return versions;
    });
}
/**
 * 根据指定 version 获取符合 semver 规范的最新版本号
 *
 * @param {String} baseVersion 指定的基准 version
 * @param {Array} versions
 */
function getLatestSemverVersion(baseVersion, versions) {
    versions = versions
        .filter(function (version) { return semver.satisfies(version, "^" + baseVersion); })
        .sort(function (a, b) {
        return semver.gt(b, a);
    });
    return versions[0];
}
/**
 * 根据指定 version 和包名获取符合 semver 规范的最新版本号
 *
 * @param {String} npm 包名
 * @param {String} baseVersion 指定的基准 version
 */
function getNpmLatestSemverVersion(npm, baseVersion, registry) {
    return getVersions(npm, registry).then(function (versions) {
        return getLatestSemverVersion(baseVersion, versions);
    });
}
exports.getNpmLatestSemverVersion = getNpmLatestSemverVersion;
/**
 * 获取某个 npm 的最新版本号
 *
 * @param {String} npm
 */
function getLatestVersion(npm, registry) {
    return getNpmInfo(npm, registry).then(function (data) {
        if (!data['dist-tags'] || !data['dist-tags'].latest) {
            log_1.default.error('没有 latest 版本号', data);
            return Promise.reject(new Error('Error: 没有 latest 版本号'));
        }
        var latestVersion = data['dist-tags'].latest;
        return latestVersion;
    });
}
exports.getLatestVersion = getLatestVersion;
function isAliNpm(npmName) {
    return /^(@alife|@ali|@alipay|@kaola)\//.test(npmName);
}
exports.isAliNpm = isAliNpm;
function getNpmRegistry(npmName) {
    if (npmName === void 0) { npmName = ''; }
    if (process.env.REGISTRY) {
        return process.env.REGISTRY;
    }
    if (isAliNpm(npmName)) {
        return 'https://registry.npm.alibaba-inc.com';
    }
    return 'https://registry.npm.taobao.org';
}
exports.getNpmRegistry = getNpmRegistry;
function getUnpkgHost(npmName) {
    if (npmName === void 0) { npmName = ''; }
    if (process.env.UNPKG) {
        return process.env.UNPKG;
    }
    if (isAliNpm(npmName)) {
        return 'https://unpkg.alibaba-inc.com';
    }
    return 'https://unpkg.com';
}
exports.getUnpkgHost = getUnpkgHost;
function getNpmClient(npmName) {
    if (npmName === void 0) { npmName = ''; }
    if (process.env.NPM_CLIENT) {
        return process.env.NPM_CLIENT;
    }
    if (isAliNpm(npmName)) {
        return 'tnpm';
    }
    return 'npm';
}
exports.getNpmClient = getNpmClient;
function checkAliInternal() {
    return request({
        url: 'https://ice.alibaba-inc.com/check.node',
        timeout: 3 * 1000,
        resolveWithFullResponse: true,
    }).catch(function (err) {
        log_1.default.verbose('checkAliInternal error: ', err.message);
        return false;
    }).then(function (response) {
        return response.statusCode === 200 && /success/.test(response.body);
    });
}
exports.checkAliInternal = checkAliInternal;
var packageJSONFilename = 'package.json';
exports.packageJSONFilename = packageJSONFilename;
function readPackageJSON(projectPath) {
    return __awaiter(this, void 0, void 0, function () {
        var packagePath, packagePathIsExist;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    packagePath = path.join(projectPath, packageJSONFilename);
                    return [4 /*yield*/, fsExtra.pathExists(packagePath)];
                case 1:
                    packagePathIsExist = _a.sent();
                    if (!packagePathIsExist) {
                        throw new Error('Project\'s package.json file not found in local environment');
                    }
                    return [4 /*yield*/, fsExtra.readJson(packagePath)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.readPackageJSON = readPackageJSON;
/**
 * 获取已安装在本地的模块版本号
 *
 * @param projectPath
 * @param packageName
 */
function getPackageLocalVersion(projectPath, packageName) {
    var packageJsonPath = path.join(projectPath, 'node_modules', packageName, 'package.json');
    var packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
    return packageJson.version;
}
exports.getPackageLocalVersion = getPackageLocalVersion;
